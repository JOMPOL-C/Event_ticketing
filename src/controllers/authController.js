const Organizer = require("../models/organizerModel");
const Attendee = require("../models/attendeeModel");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { cloudinary } = require("../utils/cloudinary");

// ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
exports.registerAttendee = async (req, res) => {
    try {
        const { username, email, password } = req.body;
        const user = new Attendee({ username, email, password, role: "attendee" });
        await user.save();
        res.redirect("/login");
    } catch (err) {
        console.error("‚ùå Register Attendee Error:", err.message);
        res.status(400).send("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
};

// ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏á‡∏≤‡∏ô
exports.registerOrganizer = async (req, res) => {
    try {
        const { username, email, password } = req.body;
        const user = new Organizer({ username, email, password, role: "organizer" });
        await user.save();
        res.redirect("/select_login");
    } catch (err) {
        console.error("‚ùå Register Organizer Error:", err.message);
        res.status(400).send("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
};

exports.login = async (req, res) => {
    const { email, password, userType } = req.body;

    try {
        let user;

        if (userType === "attendee") {
            user = await Attendee.findOne({ email });
        } else if (userType === "organizer") {
            user = await Organizer.findOne({ email });
        }

        if (!user) return res.status(400).send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ");

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).send("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á token
        const token = jwt.sign(
            {
                id: user._id.toString(),   // ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string
                role: user.role.toLowerCase(), // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô case-sensitive
                email: user.email          // ‡πÉ‡∏™‡πà email ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô nav
            },
            process.env.JWT_SECRET
        );

        res.cookie("token", token, { httpOnly: true });

        // redirect ‡∏ï‡∏≤‡∏° role
        if (user.role === "attendee") {
            return res.redirect("/");
        } else {
            return res.redirect("/");
        }
    } catch (err) {
        console.error("‚ùå Login Error:", err.message);
        res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    }
};

exports.logout = (req, res) => {
    res.clearCookie("token");
    console.log("üö™ User logged out");
    res.redirect("/");
};

exports.updateProfile = async (req, res) => {
    try {
        const userId = req.user._id.toString();
        const role = req.user.role.toLowerCase();

        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å model ‡∏ï‡∏≤‡∏° role
        const Model = role === "organizer" ? Organizer : Attendee;

        // ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
        const user = await Model.findById(userId);
        console.log("üß† userId:", userId);
        console.log("üß† role:", role);
        if (!user) return res.status(404).send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");

        console.log("üßæ req.file:", req.file ? req.file.originalname : "‚ùå no file");
        console.log("üßæ req.file.buffer size:", req.file?.buffer?.length || 0);
        console.log("üßæ req.body:", req.body);
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå
        if (req.file) {
            try {
                // ‚úÖ ‡πÉ‡∏ä‡πâ Promise + end ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô callback ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                const uploadResult = await new Promise((resolve, reject) => {
                    const upload = cloudinary.uploader.upload_stream(
                        {
                            folder: `event_ticketing/${role}_profiles`,
                            resource_type: "image",
                        },
                        (error, result) => {
                            if (error) return reject(error);
                            resolve(result);
                        }
                    );
                    upload.end(req.file.buffer); // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô Promise ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                });

                // ‚úÖ update user ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                user.profileImage = uploadResult.secure_url;
                user.username = req.body.username || user.username;
                user.email = req.body.email || user.email;
                await user.save();

                console.log(`‚úÖ Updated profile for ${role}:`, user.profileImage);
                return res.redirect("/profile");
            } catch (error) {
                console.error("‚ùå Cloudinary Upload Error:", error);
                return res.status(500).send("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
            }
        } else {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•
            user.username = req.body.username || user.username;
            user.email = req.body.email || user.email;
            await user.save();
            console.log("‚úÖ Updated user info only (no image)");
            return res.redirect("/api/profile");
        }
    } catch (err) {
        console.error("‚ùå Update Profile Error:", err);
        res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå");
    }
};