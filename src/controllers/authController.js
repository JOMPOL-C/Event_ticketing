const Organizer = require("../models/organizerModel");
const Attendee = require("../models/attendeeModel");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { cloudinary } = require("../utils/cloudinary");

// ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
exports.registerAttendee = async (req, res) => {
  try {
    const { username, email, password } = req.body;

    // ‡∏Å‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡∏Ç‡πâ‡∏≤‡∏°
    const dupA = await Attendee.findOne({ email });
    const dupO = await Organizer.findOne({ email });
    if (dupA || dupO) return res.status(400).send("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");

    const user = new Attendee({ username, email, password, role: "attendee" });
    await user.save();

    // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
    return res.redirect("/login");
  } catch (err) {
    console.error("‚ùå Register Attendee Error:", err.message);
    return res.status(400).send("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
};

// ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏á‡∏≤‡∏ô
exports.registerOrganizer = async (req, res) => {
  try {
    const { username, email, password } = req.body;

    const dupA = await Attendee.findOne({ email });
    const dupO = await Organizer.findOne({ email });
    if (dupA || dupO) return res.status(400).send("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");

    const user = new Organizer({ username, email, password, role: "organizer" });
    await user.save();

    return res.redirect("/login");
  } catch (err) {
    console.error("‚ùå Register Organizer Error:", err.message);
    return res.status(400).send("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
};

// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
exports.login = async (req, res) => {
  const { email, password, userType } = req.body;

  try {
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    const Model = userType === "organizer" ? Organizer : Attendee;
    const user = await Model.findOne({ email });
    if (!user) return res.status(400).send("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).send("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT
    const token = jwt.sign(
      {
        id: user._id.toString(),
        role: (user.role || "").toLowerCase(),
        email: user.email
      },
      process.env.JWT_SECRET,
      { expiresIn: "7d" }
    );

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    res.cookie("token", token, {
      httpOnly: true,
      sameSite: "lax",
      secure: process.env.NODE_ENV === "production",
      maxAge: 7 * 24 * 60 * 60 * 1000
    });

    // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    return res.redirect("/");
  } catch (err) {
    console.error("‚ùå Login Error:", err.message);
    return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
  }
};

// ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
exports.logout = (req, res) => {
  res.clearCookie("token");
  console.log("üö™ User logged out");
  return res.redirect("/");
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
exports.updateProfile = async (req, res) => {
  try {
    const userId = req.user._id.toString();
    const role = (req.user.role || "").toLowerCase();

    const Model = role === "organizer" ? Organizer : Attendee;
    const user = await Model.findById(userId);
    if (!user) return res.status(404).send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)
    if (req.file) {
      try {
        const uploadResult = await new Promise((resolve, reject) => {
          const upload = cloudinary.uploader.upload_stream(
            { folder: `event_ticketing/${role}_profiles`, resource_type: "image" },
            (error, result) => (error ? reject(error) : resolve(result))
          );
          upload.end(req.file.buffer);
        });

        user.profileImage = uploadResult.secure_url;
      } catch (error) {
        console.error("‚ùå Cloudinary Upload Error:", error);
        return res.status(500).send("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    user.username = req.body.username || user.username;
    user.email = req.body.email || user.email;

    await user.save();
    console.log(`‚úÖ Updated profile for ${role}`);

    return res.redirect("/api/profile");
  } catch (err) {
    console.error("‚ùå Update Profile Error:", err);
    return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå");
  }
};
